// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`reset new password it match snapshoot 1`] = `
<Fragment>
  <WithStyles(ForwardRef(Snackbar))
    autoHideDuration={5000}
    onclose={[Function]}
    open={false}
  >
    <Alert
      onclose={[Function]}
      severity="success"
    >
      successful: 
      üëç You can login with new Password
    </Alert>
  </WithStyles(ForwardRef(Snackbar))>
  <WithStyles(ForwardRef(Container))
    component="main"
    data-test="container"
    maxWidth="xs"
  >
    <ToastContainer
      autoClose={3000}
      closeButton={[Function]}
      closeOnClick={true}
      draggable={true}
      draggablePercent={40}
      hideProgressBar={true}
      newestOnTop={false}
      pauseOnFocusLoss={true}
      pauseOnHover={true}
      position="bottom-left"
      role="alert"
      rtl={false}
      transition={[Function]}
    />
    <div
      className="makeStyles-paper-1"
    >
      <WithStyles(ForwardRef(Typography))
        component="h1"
        variant="h5"
      >
        Reset Password
      </WithStyles(ForwardRef(Typography))>
      <Formik
        initialValues={
          Object {
            "confirmPassword": "",
            "password": "",
          }
        }
        onSubmit={[Function]}
        validationSchema={
          ObjectSchema {
            "_blacklist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_blacklistError": undefined,
            "_excludedEdges": Array [],
            "_nodes": Array [
              "password",
              "confirmPassword",
            ],
            "_sortErrors": [Function],
            "_typeError": [Function],
            "_whitelist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_whitelistError": undefined,
            "conditions": Array [],
            "deps": Array [],
            "exclusiveTests": Object {},
            "fields": Object {
              "confirmPassword": StringSchema {
                "_blacklist": ReferenceSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "_blacklistError": undefined,
                "_typeError": [Function],
                "_whitelist": ReferenceSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "_whitelistError": undefined,
                "conditions": Array [
                  Condition {
                    "fn": [Function],
                    "refs": Array [
                      Reference {
                        "getter": [Function],
                        "isContext": false,
                        "isSibling": true,
                        "isValue": false,
                        "key": "password",
                        "map": undefined,
                        "path": "password",
                      },
                    ],
                  },
                ],
                "deps": Array [
                  "password",
                ],
                "exclusiveTests": Object {
                  "required": true,
                },
                "spec": Object {
                  "abortEarly": true,
                  "label": undefined,
                  "meta": undefined,
                  "nullable": false,
                  "presence": "required",
                  "recursive": true,
                  "strict": false,
                  "strip": false,
                },
                "tests": Array [
                  [Function],
                ],
                "transforms": Array [
                  [Function],
                ],
                "type": "string",
              },
              "password": StringSchema {
                "_blacklist": ReferenceSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "_blacklistError": undefined,
                "_mutate": undefined,
                "_typeError": [Function],
                "_whitelist": ReferenceSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "_whitelistError": undefined,
                "conditions": Array [],
                "deps": Array [],
                "exclusiveTests": Object {
                  "required": true,
                },
                "spec": Object {
                  "abortEarly": true,
                  "label": undefined,
                  "meta": undefined,
                  "nullable": false,
                  "presence": "required",
                  "recursive": true,
                  "strict": false,
                  "strip": false,
                },
                "tests": Array [
                  [Function],
                ],
                "transforms": Array [
                  [Function],
                ],
                "type": "string",
              },
            },
            "spec": Object {
              "abortEarly": true,
              "label": undefined,
              "meta": undefined,
              "nullable": false,
              "presence": "optional",
              "recursive": true,
              "strict": false,
              "strip": false,
            },
            "tests": Array [],
            "transforms": Array [
              [Function],
            ],
            "type": "object",
          }
        }
      >
        <Component />
      </Formik>
    </div>
  </WithStyles(ForwardRef(Container))>
</Fragment>
`;
